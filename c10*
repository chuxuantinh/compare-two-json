const a ={
  "_id": {
    "$oid": "60f44ca55bfe5b01d442acc7"
  },
  "collection_name": "Department",
  "policy_id": "policy 1",
  "description": "....",
  "rule_combining": "permit-overrides",
  "is_attribute_resource_required": false,
  "action": "read",
  "target": {
    "function_name": "BooleanEqual",
    "parameters": [
      {
        "value": "active",
        "resource_id": "Subject"
      },
      {
        "value": "true"
      }
    ]
  },
  "rules": [
    {
      "_id": "rule 1",
      "effect": "Permit",
      "condition": {
        "function_name": "Or",
        "parameters": [
          {
            "function_name": "StringEqual",
            "parameters": [
              {
                "value": "role",
                "resource_id": "Subject"
              },
              {
                "value": "tinh"
              }
            ]
          },
          {
            "function_name": "StringEqual",
            "parameters": [
              {
                "value": "role",
                "resource_id": "Subject"
              },
              {
                "value": "doctor"
              }
            ]
          }
        ]
      }
    }
  ]
};
const b ={
  "_id": {
    "$oid": "60f44ca55bfe5b01d442acc7"
  },
  "collection_name": "Department",
  "policy_id": "policy 1",
  "description": "....",
  "rule_combining": "permit-overrides",
  "is_attribute_resource_required": false,
  "action": "read",
  "target": {
    "function_name": "BooleanEqual",
    "parameters": [
      {
        "value": "active",
        "resource_id": "Subject"
      },
      {
        "value": "true"
      }
    ]
  },
  "rules": [
    {
      "_id": "rule 1",
      "effect": "Permit",
      "condition": {
        "function_name": "Or",
        "parameters": [
          {
            "function_name": "StringEqual",
            "parameters": [
              {
                "value": "role",
                "resource_id": "Subject"
              },
              {
                "value": "tinh"
              }
            ]
          },
          {
            "function_name": "StringEqual",
            "parameters": [
              {
                "value": "role",
                "resource_id": "Subject"
              },
              {
                "value": "doctor"
              }
            ]
          }
        ]
      }
    }
  ]
};

//console.log(JSON.stringify(a) == JSON.stringify(b))

function ObjectsDiff(o1,o2) {
    const typeObject = function(o){
        return typeof o === 'object';
    };
    const diff = function (o1, o2) {
        const result = {};
        // if first is item is not object
        if (!typeObject(o1) && typeObject(o2)) {
            return o2;
        }
        // if second is item is not object
        else if (typeObject(o1) && !typeObject(o2)) {
            return undefined;
        }
        // if they are equal
        else if (Object.is(o1, o2)) {
            return undefined;
        }
        const keys = Object.keys(o2);
        for (let i=0; i<keys.length; i++) {
            const key = keys[i];
            // if both are objects
            if ( typeObject(o1[key]) && typeObject(o2[key])) {
                // if equal, return nothing
                if ( Object.is(o1[key], o2[key]) ) {
                    // do nothing
                } else if (o1[key] === o2[key]) {
                    // do nothing
                } else {
                    result[key] = diff(o1[key],o2[key]);
                }
            } else if (o1[key] == o2[key]) {
                result[key] = o2[key];
            } else {
                // do nothing
            }
        }
        return result;
    };
    return [
        diff(o1,o2),
        diff(o2,o1),
    ];
}

console.log( ObjectsDiff(a,b));


***CT***
Output:

[
  {
    _id: { '$oid': '60f44ca55bfe5b01d442acc7' },
    collection_name: 'Department',
    policy_id: 'policy 1',
    description: '....',
    rule_combining: 'permit-overrides',
    is_attribute_resource_required: false,
    action: 'read',
    target: { function_name: 'BooleanEqual', parameters: [Object] },
    rules: { '0': [Object] }
  },
  {
    _id: { '$oid': '60f44ca55bfe5b01d442acc7' },
    collection_name: 'Department',
    policy_id: 'policy 1',
    description: '....',
    rule_combining: 'permit-overrides',
    is_attribute_resource_required: false,
    action: 'read',
    target: { function_name: 'BooleanEqual', parameters: [Object] },
    rules: { '0': [Object] }
  }
]

function deepEqualok(x, y) {
  const ok = Object.keys, tx = typeof x, ty = typeof y;
  return x && y && tx === 'object' && tx === ty ? (
    ok(x).length === ok(y).length &&
      ok(x).every(key => deepEqual(x[key], y[key]))
  ) : (x === y);
}

***CT***

function equals1(obj1, obj2) {
    function _equals(obj1, obj2) {
        return JSON.stringify(obj1)
            === JSON.stringify($.extend(true, {}, obj1, obj2));
    }
    return _equals(obj1, obj2) && _equals(obj2, obj1);
}

**CT**

function countProps(obj) {
    var count = 0;
    for (k in obj) {
        if (obj.hasOwnProperty(k)) {
            count++;
        }
    }
    return count;
};

function objectEquals(v1, v2) {

    if (typeof(v1) !== typeof(v2)) {
        return false;
    }

    if (typeof(v1) === "function") {
        return v1.toString() === v2.toString();
    }

    if (v1 instanceof Object && v2 instanceof Object) {
        if (countProps(v1) !== countProps(v2)) {
            return false;
        }
        var r = true;
        for (k in v1) {
            r = objectEquals(v1[k], v2[k]);
            if (!r) {
                return false;
            }
        }
        return true;
    } else {
        return v1 === v2;
    }
}


***CT***
function filter(obj1, obj2) {
    var result = {};
    for(key in obj1) {
        if(obj2[key] == obj1[key]) result[key] = obj2[key];
        if(typeof obj2[key] == 'array' && typeof obj1[key] == 'array') 
            result[key] = arguments.callee(obj1[key], obj2[key]);
        if(typeof obj2[key] == 'object' && typeof obj1[key] == 'object') 
            result[key] = arguments.callee(obj1[key], obj2[key]);
    }
    return result;
}

Output:

{
  _id: { '$oid': '60f44ca55bfe5b01d442acc7' },
  collection_name: 'Department',
  policy_id: 'policy 1',
  description: '....',
  rule_combining: 'permit-overrides',
  is_attribute_resource_required: false,
  action: 'read',
  target: {
    function_name: 'BooleanEqual',
    parameters: { '0': [Object], '1': [Object] }
  },
  rules: { '0': { _id: 'rule 1', effect: 'Permit', condition: [Object] } }
}

function deepEqual(object1, object2) {
  const keys1 = Object.keys(object1);
  const keys2 = Object.keys(object2);
  if (keys1.length !== keys2.length) {
    return false;
  }
  for (const key of keys1) {
    const val1 = object1[key];
    const val2 = object2[key];
    const areObjects = isObject(val1) && isObject(val2);
    if (
      areObjects && !deepEqual(val1, val2) ||
      !areObjects && val1 !== val2
    ) {
      return false;
    }
  }
  return true;
}
function isObject(object) {
  return object != null && typeof object === 'object';
}


**CT**

const typeOf = x => 
  ({}).toString
      .call(x)
      .match(/\[object (\w+)\]/)[1]

function areSimilar(a, b) {
  const everyKey = f => Object.keys(a).every(f)

  switch(typeOf(a)) {
    case 'Array':
      return a.length === b.length &&
        everyKey(k => areSimilar(a.sort()[k], b.sort()[k]));
    case 'Object':
      return Object.keys(a).length === Object.keys(b).length &&
        everyKey(k => areSimilar(a[k], b[k]));
    default:
      return a === b;
  }
}
**CT***

Object.defineProperty(Object.prototype, "equals", {
    enumerable: false,
    value: function (obj) {
        var p;
        if (this === obj) {
            return true;
        }

        // some checks for native types first

        // function and sring
        if (typeof(this) === "function" || typeof(this) === "string" || this instanceof String) { 
            return this.toString() === obj.toString();
        }

        // number
        if (this instanceof Number || typeof(this) === "number") {
            if (obj instanceof Number || typeof(obj) === "number") {
                return this.valueOf() === obj.valueOf();
            }
            return false;
        }

        // null.equals(null) and undefined.equals(undefined) do not inherit from the 
        // Object.prototype so we can return false when they are passed as obj
        if (typeof(this) !== typeof(obj) || obj === null || typeof(obj) === "undefined") {
            return false;
        }

        function sort (o) {
            var result = {};

            if (typeof o !== "object") {
                return o;
            }

            Object.keys(o).sort().forEach(function (key) {
                result[key] = sort(o[key]);
            });

            return result;
        }

        if (typeof(this) === "object") {
            if (Array.isArray(this)) { // check on arrays
                return JSON.stringify(this) === JSON.stringify(obj);                
            } else { // anyway objects
                for (p in this) {
                    if (typeof(this[p]) !== typeof(obj[p])) {
                        return false;
                    }
                    if ((this[p] === null) !== (obj[p] === null)) {
                        return false;
                    }
                    switch (typeof(this[p])) {
                    case 'undefined':
                        if (typeof(obj[p]) !== 'undefined') {
                            return false;
                        }
                        break;
                    case 'object':
                        if (this[p] !== null 
                                && obj[p] !== null 
                                && (this[p].constructor.toString() !== obj[p].constructor.toString() 
                                        || !this[p].equals(obj[p]))) {
                            return false;
                        }
                        break;
                    case 'function':
                        if (this[p].toString() !== obj[p].toString()) {
                            return false;
                        }
                        break;
                    default:
                        if (this[p] !== obj[p]) {
                            return false;
                        }
                    }
                };

            }
        }

        // at least check them with JSON
        return JSON.stringify(sort(this)) === JSON.stringify(sort(obj));
    }
});
