const a= 
    {
  "_id": {
    "$oid": "60f44ca55bfe5b01d442acc7"
  },
  "collection_name": "Department",
  "policy_id": "policy 1",
  "description": "....",
  "rule_combining": "permit-overrides",
  "is_attribute_resource_required": false,
  "action": "read",
  "target": {
    "function_name": "BooleanEqual",
    "parameters": [
      {
        "value": "active",
        "resource_id": "Subject"
      },
      {
        "value": "true"
      }
    ]
  },
  "rules": [
    {
      "_id": "rule 1",
      "effect": "Permit",
      "condition": {
        "function_name": "Or",
        "parameters": [
          {
            "function_name": "StringEqual",
            "parameters": [
              {
                "value": "role",
                "resource_id": "Subject"
              },
              {
                "value": "tinh"
              }
            ]
          },
          {
            "function_name": "StringEqual",
            "parameters": [
              {
                "value": "role",
                "resource_id": "Subject"
              },
              {
                "value": "doctor"
              }
            ]
          }
        ]
      }
    }
  ]
}
  ;
const b = {
  "_id": {
    "$oid": "60f44ca55bfe5b01d442acc7"
  },
  "collection_name": "Department",
  "policy_id": "policy 1",
  "description": "....",
  "rule_combining": "permit-overrides",
  "is_attribute_resource_required": false,
  "action": "read",
  "target": {
    "function_name": "BooleanEqual",
    "parameters": [
      {
        "value": "active",
        "resource_id": "Subject"
      },
      {
        "value": "true"
      }
    ]
  },
  "rules": [
    {
      "_id": "rule 1",
      "effect": "Permit",
      "condition": {
        "function_name": "Or",
        "parameters": [
          {
            "function_name": "StringEqual",
            "parameters": [
              {
                "value": "role",
                "resource_id": "Subject"
              },
              {
                "value": "tinh"
              }
            ]
          },
          {
            "function_name": "StringEqual",
            "parameters": [
              {
                "value": "role",
                "resource_id": "Subject"
              },
              {
                "value": "doctor"
              }
            ]
          }
        ]
      }
    }
  ]
}
    ;
const compareObjects = (arr1, arr2) => {
  if (Array.isArray(arr1) && Array.isArray(arr2)) {
    // a man's array does not look like a girl's array
    if (arr1.length !== arr2.length) return false
    else if (arr1.length == arr2.length) {
      if(JSON.stringify(arr1) ==JSON.stringify(arr2))
      {
        
         //console.log(JSON.stringify(arr1));
        //console.log(JSON.stringify(arr1));
      }
    }
  }

  const keys = Object.keys(arr1)
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    
    if (Array.isArray(arr1[key])) {
      if (Array.isArray(arr2[key])) {
        // a man has an array, a girl has a different array
        
        if (!compare(arr1[key], arr2[key])) 
        {
          //console.log(JSON.stringify(key));
          return false
        
        
        }
        else 
        {
          //console.log(JSON.stringify(arr1));
          if (key == 'rules')
          {
          console.log(JSON.stringify(arr1[key]));}
        // a man may share an array with a girl
        continue
        
        
        }
      }
      // a man has an array, a girl does not
      return false
    }

    // account for date objects
    if (arr1[key] instanceof Date) {
      if (arr2[key] instanceof Date) {
        if (arr1[key].valueOf() !== arr2[key].valueOf()) return false
        continue
      }
      return false
    }

    // account for regexp
    if (arr1[key] instanceof RegExp) {
      if (arr2[key] instanceof RegExp) {
        if (arr1[key].toString() !== arr2[key].toString()) return false
        continue
      }
      return false
    }

    if (typeof arr1[key] === 'object') {
      if (typeof arr2[key] === 'object' && !Array.isArray(arr2[key])) {
        // a man has an object, a girl has a different object
        if (!compare(arr1[key], arr2[key])) return false
        //console.log(JSON.stringify(arr1));
        continue
      }
      // a man has an object, a girl does not
      return false
    }
    
    // a man has values that a girl does not share so sanh value
    if (arr1[key] !== arr2[key]) {return false}
    else
    { if ((arr1[key] ===arr2[key]) && (key[arr1]=== key[arr2] ))
    {
      //console.log(JSON.stringify(arr2[key]));
      //console.log(JSON.stringify(arr1[key]));
      if(JSON.stringify(arr1) ==JSON.stringify(arr2))
      {
    
        //console.log(JSON.stringify(arr1));
        //console.log(JSON.stringify(key));
      }
    }
      
    }


  }

  return true
}

const compare = (a, b) => {
  if (a && b && ((Array.isArray(a) && Array.isArray(b)) || (typeof a === 'object' && typeof b === 'object')) && (a.length === b.length)) {
    return compareObjects(a, b)
  }
  return false
}


console.log(JSON.stringify(compare(a,b)));
